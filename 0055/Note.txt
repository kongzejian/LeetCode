自己的思路：
dp[i]表示是否能跳到i位置
递推公式：dp[3]=(dp[2] && (3-2)<=nums[2]) || (dp[1] && (3-1)<=nums[1]) || (dp[0] && (3-2)<=nums[0]
初始化：dp[0]=true，因为起点在0索引处

时间复杂度：O(n^2)

别人的思路： 贪心算法，不停更新能跳的最远距离，查看是否最后能超过数组的长度。遍历每一个当前能跳到的地方（i<=cover），并用跳到的地方能跳的距离加到cover里面（如果更大的话）
class Solution {
    public boolean canJump(int[] nums) {
    if(nums.length==1){
        return true;
    }
    int cover=nums[0];
    for(int i=1;i<=cover;i++){
        cover=Math.max(cover,i+nums[i]);
        if(cover>=nums.length-1){
            return true;
        }
    }
    return false;
    }
}
