自己的思路，第一行需要单独考虑，第二行需要单独考虑，每一行最左侧需要初始化，每一行最后一个元素需要注意
学习别人的代码：

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int[][] f = new int[n][n]; //创建数组，而List
        f[0][0] = triangle.get(0).get(0);
        for (int i = 1; i < n; ++i) {
            f[i][0] = f[i - 1][0] + triangle.get(i).get(0); //最左侧元素
            for (int j = 1; j < i; ++j) { //除最后右的元素外的其他元素
                f[i][j] = Math.min(f[i - 1][j - 1], f[i - 1][j]) + triangle.get(i).get(j);
            }
            f[i][i] = f[i - 1][i - 1] + triangle.get(i).get(i); //最右侧元素
        }
        //寻找最后一行的最小值
        int minTotal = f[n - 1][0];
        for (int i = 1; i < n; ++i) {
            minTotal = Math.min(minTotal, f[n - 1][i]);
        }
        return minTotal;
    }
}

空间优化：
f[i][j] 只与 f[i-1][..]f[i−1][..] 有关，而与 f[i-2][..]f[i−2][..] 及之前的状态无关，因此我们不必存储这些无关的状态。
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int[][] f = new int[2][n]; //交替存储
        f[0][0] = triangle.get(0).get(0);
        for (int i = 1; i < n; ++i) {
            int curr = i % 2; //curr为1，pre就位0；curr为0，pre就为1
            int prev = 1 - curr;
            //最左侧元素
            f[curr][0] = f[prev][0] + triangle.get(i).get(0);
            //中间元素
            for (int j = 1; j < i; ++j) {
                f[curr][j] = Math.min(f[prev][j - 1], f[prev][j]) + triangle.get(i).get(j);
            }
            //最右侧元素
            f[curr][i] = f[prev][i - 1] + triangle.get(i).get(i);
        }
        //如果偶数行，最后一行就为f[1]，如果奇数行，最后一行为f[0]
        int minTotal = f[(n - 1) % 2][0];
        for (int i = 1; i < n; ++i) {
            minTotal = Math.min(minTotal, f[(n - 1) % 2][i]);
        }
        return minTotal;
    }
}


